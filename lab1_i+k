#include <iostream>
#include <cmath>
#include <string>
#include <sstream>

using namespace std;

struct coordinates{
    double x;
    double y;
};

struct figures{
    int sides;
    double len;
    double sq;
    double p;
    coordinates c1[100];
};

int getInput(){   
    int number;
    string userInput;
    while (true) {
        getline(cin, userInput);
        stringstream ss(userInput);

        if (ss >> number) {
            break;
        }
        else {
            cout << "error! input number " << endl;
        }
    }
    return number;
}

void realloc(figures *&polygon, int &n){
    figures *pol1 = new figures[n];
    for (int i = 0; i < n - 1; i++) {
        pol1[i] = polygon[i];
    }
    delete[] polygon;
    polygon = pol1;
}

void square(figures *polygon){
    (polygon -> sq) = ((double)(polygon -> sides))*pow((polygon -> len), 2)/(4*tan(M_PI/((double)(polygon -> sides))));
    cout << "polygon " << polygon << " square " << polygon -> sq  << endl;
}

void per(figures *polygon){
    (polygon -> p) = (polygon -> sides)*(polygon -> len);
    cout << "polygon " << polygon << " per " << polygon -> p << endl;
}

void input(figures *&polygon, int &n){
    n++;
    realloc(polygon, n);
    cout << "input number of sides" << endl;
    polygon -> sides = getInput();
    if (polygon -> sides <= 2){
        cout << "error!" << endl;
    }
    else{
        cout << "input length" << endl;
        polygon -> len = getInput();
        per(&polygon[n - 1]);
        square(&polygon[n - 1]);
        cout << "so good" << endl;
        cout << "input coordinates first point" << endl;
        polygon[n - 1].c1 -> x = getInput();
        polygon[n - 1].c1 -> y = getInput();
        double c_y = 0;
        double R = fabs((polygon[n - 1].len)/(2*sin(M_PI/polygon[n - 1].sides)));
        if((sqrt(pow(polygon[n - 1].c1 -> x,double(2)) + pow(polygon[n - 1].c1 -> y,double(2))) - R) < 0){
            cout << "error coordinate\n";
            c_y = sqrt(pow(R, double(2))-pow(polygon[n - 1].c1 -> x, double(2)));
            cout << "with this x, the y must modulo more than\n" << c_y << "\n";
            input(polygon, n);
        }
    }
}

void maxPerSq(figures *polygon, int *n, int a){
    double maxper = 0, maxsq = 0.0;
    if(a == 1){
        for(int i = 0; i < (*n); i++){
            if((maxper - (polygon[i].p)) < 0){
                maxper = (polygon[i].p);
            }
        }
        cout << "polygons maximal perimetr:" << endl;
        for(int j = 0; j < (*n); j++){
            if(polygon[j].p == maxper){
                cout << j <<endl;
            }
        }
    }
    if(a == 2){
        for(int i = 0; i < *n; i++){
            if(maxsq - (polygon[i].sq) < 0){
                maxsq = (polygon[i].sq);
            }
        }
        cout << "polygons maximal square:" << endl;
        for(int j = 0; j < (*n); j++){
            if(polygon[j].sq == maxsq){
                cout << j << endl;
            }
        }
    }
}

void output(figures *polygon, int n){
    if(n == 0){
        cout << "no information about polygon" << endl;
    }
    else{
        for(int i = 0; i < n; i++){
            cout << i + 1 << endl;
            cout << "number of sides: " << (polygon[i].sides) << endl;
            cout << "length of sides: " << (polygon[i].len) << endl;
            cout << "p = " << (polygon[i].p) << endl;
            cout << "s = " << (polygon[i].sq) << endl;
            double x0, y0, phi, R;
            int flagx = 1;
            int flagy = 1;
            if(polygon[i].c1 -> x < 0){flagx = -1;}
            if(polygon[i].c1 -> y < 0){flagy = -1;}
            double modx = fabs(polygon[i].c1 -> x);
            double mody = fabs(polygon[i].c1 -> y);
            R = fabs((polygon[i].len)/(2*sin(M_PI/polygon[i].sides)));
            cout << "R = " << R << endl;
            phi = atan(mody/modx);
            x0 = modx - (R)*cos(phi);
            y0 = mody - (R)*sin(phi);
            double angle = (2*M_PI)/polygon[i].sides;
            cout << "coordinates: " << i + 1 << "\n";
            cout << "vertex 1: " << polygon[i].c1 -> x << ";" << polygon[i].c1 -> y << "\n";
            for(int j = 1; j < polygon[i].sides; j++){
                if(flagx != flagy){
                    double NewAngle = phi - (j)*angle;
                    double Next_X = x0 + R*cos(NewAngle);
                    double Next_Y = y0 + R*sin(NewAngle);
                    cout << "vertex" << j + 1 << ": " << Next_X*flagx << ";" << Next_Y*flagy << "\n";
                }
                else{
                    double NewAngle = phi + (j)*angle;
                    double Next_X = x0 + R*cos(NewAngle);
                    double Next_Y = y0 + R*sin(NewAngle);
                    cout << "vertex" << j + 1 << ": " << Next_X*flagx << ";" << Next_Y*flagy << "\n";
                }
            }
        }
    }
}

void newpage(){
    for(int i = 0; i < 100; i++){
        cout << "\n";
    }
}

void deletefigure(figures *polygon, int &n)
{
    cout << "input number of polygon to delete" << endl;
    int num;
    num = getInput();
    if (num >= n) {
        cout << "error!!" << endl;
    } else {
        for (int i = num + 1; i < n; i++) {
            polygon[i - 1] = polygon[i];
        }
        n--;
    }
}

void menu2(figures *polygon, int n);

int main()
{
    int n = 0;
    figures *polygon = new figures[1];

    int choose, it = 1;
    while(it == 1){
    cout << "choose your option:" << endl;
    cout << "1 - input new information about a polygon" << endl;
    cout << "2 - look through the information" << endl;
    cout << "3 - delete information about a polygon" << endl;
    cout << "4 - define maximal square or perimetr" << endl;
    cout << "5 - quit" << endl;
    choose = getInput();
    newpage();
    switch(choose){
    case 1:
        input(polygon, n);
        break;
    case 2:
        output(polygon, n);
        break;
    case 3:
        deletefigure(polygon, n);
        break;
    case 4:
        menu2(polygon, n);
        break;
    case 5:
        cout << "are you sure? (1 - yes, 2 - no)" << endl;
        int choose1;
        cin >> choose1;
        newpage();
        switch(choose1){
            case 1:
                cout << "bye!" << endl;
                delete [] polygon;
                newpage();
                it = 0;
                break;
            case 2:
                it = 1;
                break;
            default:
                cout << "error!!" << endl;
                break;
        }
            break;
        default:
        cout << "error!!" << endl;
        break;
    }
    //newpage();
    }
    return 0;
}

void menu2(figures *polygon, int n){
    int it = 1;
    while(it == 1){
        newpage();
        cout << "choose your option" << endl;
        cout << "1 - define the polygon with maximal square" << endl;
        cout << "2 - define the polygon with maximal perimetr" << endl;
        cout << "3 - return to menu" << endl;
        int choose2;
        newpage();
        choose2 = getInput();
        switch(choose2){
            case 1:
                newpage();
                maxPerSq(polygon, &n, 1);
                break;
            case 2:
                newpage();
                maxPerSq(polygon, &n, 2);
                break;
            case 3:
                cout << "returning to menu" << endl;
                newpage();
                it = 1;
                break;
            default:
                cout << "error!!" << endl;
                break;
        }
    }
}
